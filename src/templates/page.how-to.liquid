<div class="layout-content-wrapper">
  <div class="container">
    <div class="row">
      <div class="col-md-10 col-md-offset-1">

        {% include 'page-header',
                   title: 'How-to Guide',
                   subtitle: 'This page is here to give instruction on how to use or build commonly needed pieces of functionality.'
        %}

        <h3>Table of Contents</h3>
        <ul>
          <li><a href="#docs-swatches">Swatches</a></li>
          <li><a href="#docs-recharge-ajax-cart">ReCharge + AJAX Cart</a></li>
        </ul>

        <h3 id="docs-swatches" class="docs-title">Swatches</h3>
        <p>The swatch functionality inside of Z-Theme is built entirely using native Shopify features.  In order to get the most out of them, there are a few things you'll need to know.</p>
        <h6 class="docs-subsubtitle">1. Product Variant Options</h6>
        <p>Swatches will only display for products that have a variant option called <strong>Color</strong>.  We check for this string throughout the theme and render the swatches using the associated values.</p>
        <p>The values for this option should be the colors that you want be displayed on the front end of the site.  Take note of the values that you enter here becuase you'll need these for later.</p>
        <h6 class="docs-subsubtitle">2. Custom Swatch Colors</h6>
        <p>Once you've added products with different colored variants, you should start to see swatches show up on the site but there's a good chance some of them are broken.  The theme attempts to color the swatches using a combination of the <code>background-color</code> css property and a swatch modifier class specific to that color.</p>
        <p>By default, the theme comes with a color palette for about a dozen of the most common colors.  The color variables for these can be found in <code>variables.scss</code> and all begin with the prefix <code>$color-dot-</code>.  As part of the theme setup, you should adjust these variables (and add more if needed) to create a palette that works for the site you're building.</p>
        <p>Of course, we can't predict all of the colors that will be needed for the site so we've built a way to allow the user to specify and configure any number of swatch colors through theme editor.  If you look inside <code>sections/swatches.liquid</code>, you'll see that all this section does is allow a user to create a swatch by name and specify a color value.  The name that the user enters here must match the name of the color exactly.  The swatches make use of the <code>title</code> attribute so if you need help figuring out what to enter as the name, hover over the swatch and you'll see it pop up.  The liquid code then renders a style block containing rules for each color.  Because this block is output <em>after</em> the theme CSS is included, the user can also modify colors that are already defined in the palette using SCSS variables.</p>
        <p>The swatch is targeted through a modifier class created from the name of the color.  To generate a valid CSS selector from a color name, we downcase the color and then replace all spaces with dashes.</p>
        <h6 class="docs-subsubtitle">3. Product Image Swatches</h6>
        <p>The color swatch instructions above apply to <em>all</em> swatches for the specified color on the site.  You can also add swatch images per product, by uploading them to the product gallery.  To make this work you'll need to do the following:</p>
        <ul>
          <li>Upload the swatch image to the product gallery.</li>
          <li>Edit the alt text to include the name of the color and the word "swatch"</li>
        </ul>
        <p>For example: a product that comes in "Army Green" would have a swatch with alt text "swatch Army Green".  You can format this text however you want, just make sure that those two pieces are in there some where.</p>
        <p>If you need to change this "swatch" identifier for any reason, it is set in the codebase as the variable <code>alt_swatch_identifier</code>.  Do a find and replace.</p>
        <p>We use this identifier to find the swatch image when needed, but also to make sure we don't output it when looping through all product images.</p>
        <h6 class="docs-subsubtitle">4. Product Color Variant Galleries</h6>
        <p>By utilizing alt text, we can create the effect of multiple product galleries for different colors.  All you need to do is edit the alt text of each product image to include the name of the color that you want it to be associated with.  In the theme, we look look images matching the color variant option values and separate them.</p>
        <p>For example: if you have a product that comes in red and blue and you have product images that are specific to each color, you would set the alt text for the blue ones to include the word "Blue" and the red ones to include the word "Red".</p>

        <h3 id="docs-recharge-ajax-cart" class="docs-title">ReCharge + AJAX Cart</h3>
        <p>ReCharge works by creating hidden products to hold subscription data.  These products can be added to the cart but because they are technically hidden, we can't use the JS API to pull any information about them.  By default, when the user's cart is updated via the AJAX Cart, we fetch data for each individual product to render the cart, as the product info attached to the cart object is incomplete.</p>

        <p>This poses a problem as we can't use ReCharge in conjunction with the fully featured AJAX Cart.  To get around this, make the following updates to the AJAX Cart files.</p>

        <h4 class="docs-subtitle">FILE: scripts/slate/ajaxCart.js</h4>
        <ol>
          <li>
            <p>Remove the function <code>slate.AjaxCart.prototype._getCartTemplateData</code></p>
          </li>
          <li>
            <p>Modify <code>slate.AjaxCart.buildCart</code> to accept the cart object that gets returns from the shopify API instead of the <code>cartTemplateData</code> object that was returned from the method we removed above.</p>
            <p>Remove all references to the product property of the <code>cartTemplateData</code> object and add a <code>recharge_interval</code> property to the cart item to display inside the template</p>
            <div class="docs-code-example">
              <pre>
                <code>
/* Remove the code that looks like this */

if(products.hasOwnProperty(item.product_id)) {
  var product = products[item.product_id];
  for (var i = item.variant_options.length - 1; i >= 0; i--) {
    var name  = product.options[i].name;
    var value = item.variant_options[i];

    item.variant_options[i] = {
      name: name,
      value: value
    }

    // Don't show this info if it's the default variant that Shopify creates
    if(value == "Default Title") {
      delete item.variant_options[i];
    }
  }
}

/* And add the following code */

if(item.properties) {
  if(item.properties.shipping_interval_frequency && item.properties.shipping_interval_unit_type) {
    // Add property like "15 days"
    item.recharge_interval = item.properties.shipping_interval_frequency + ' ' + item.properties.shipping_interval_unit_type;
  }
}
                </code>
              </pre>
            </div>
          </li>           
          <li>
            <p>Lastly, remove any references to the <code>_getCartTemplateData</code> method that we removed.</p>
            <div class="docs-code-example">
              <pre>
                <code>
/* Find and replace things that look like this */

then(this._getCartTemplateData.bind(this)).then(this.buildCart.bind(this))

/* With this */

then(this.buildCart.bind(this));
                </code>
              </pre>
            </div>            
          </li>       
        </ol>

        <h4 class="docs-subtitle">FILE: sections/ajax-cart.liquid</h4>
        <div class="docs-code-example">
          <pre>
            <code>
{% raw %}
/* Replace the variant options loop that looks like this */

{{#if variant_options}}
  {{#each variant_options}}
    &lt;li&gt;
      {{ name }}: {{ value }}
    &lt;/li&gt;
  {{/each}}
{{/if}}

/* With this */

&lt;li&gt;{{ variant_title }}&lt;/li&gt;
{{#if recharge_interval}}
  &lt;li&gt;Delivery: Every {{ recharge_interval }}&lt;/li&gt;
{{/if}}
{% endraw %}
            </code>
          </pre>
        </div>

      </div>
    </div>
  </div>
</div>