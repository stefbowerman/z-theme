<div class="layout-content-wrapper">
  <div class="container">
    <div class="row">
      <div class="col-md-10 col-md-offset-1">

        {% include 'page-header',
                   title: 'Z-Theme Components',
                   subtitle: 'This page is here to document available components for use on the site. These are hard coded in an alternate page template file named <code>page.components.liquid</code>.'
        %}

        <h3>Table of Contents</h3>
        <ul>
          <li><a href="#docs-product-card">Product Card</a></li>
          <li><a href="#docs-article-card">Article Card</a></li>
          <li><a href="#docs-content-card">Content Card</a></li>
          <li><a href="#docs-banners">Banners</a></li>
          <li><a href="#docs-page-hero">Page Hero</a></li>
          <li><a href="#docs-promo">Promo</a></li>
          <li><a href="#docs-modals">Modals</a></li>
          <li><a href="#docs-drawer">Drawer</a></li>
          <li><a href="#docs-slideup">Slideup</a></li>
          <li><a href="#docs-slideup-alert">Slideup Alert</a></li>
        </ul>

        <h3 id="docs-product-card" class="docs-title">Product Card</h3>
        <p>See <code>snippets/product-card.liquid</code>.</p>
        {% assign all_collection = collections['all'] %}
        {% if all_collection.products.size > 0 %}
          {% assign test_product = all_collection.products[0] %}
          <div class="docs-well docs-well--constrained">
            {% include 'product-card', product: test_product %}
          </div>
        {% else %}
          <em>The product card requires a Shopify product in order to work.  <a href="{{ shop.url }}/admin/products/new">Go here to make one</a></em>.
        {% endif %}

        <h4 class="docs-subtitle">Snippet API</h4>
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Option</th>
                <th>Values</th>                
                <th>Default</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>product</code></td>
                <td>Product</td>
                <td>None</td>
                <td>Shopify product object.  Required.</td>
              </tr>
              <tr>
                <td><code>quick_view</code></td>
                <td>Boolean</td>
                <td>false</td>
                <td>Controls if the product card has a quickview trigger</td>
              </tr>
              <tr>
                <td><code>show_swatches</code></td>
                <td>Boolean</td>
                <td>True</td>
                <td>Controls if the product card displays swatches</td>
              </tr>          
            </tbody>
          </table>
        </div>         

        <h3 id="docs-article-card" class="docs-title">Article Card</h3>
        <p>See <code>snippets/article-card.liquid</code>.</p>
        {% assign news_blog = blogs['news'] %}
        {% if news_blog.articles_count > 0 %}
          {% assign test_article = news_blog.articles[0] %}
          <div class="docs-well docs-well--constrained">
            {% include 'article-card', article: test_article %}
          </div>
        {% else %}
          The article card requires a Shopify article in order to work.  <a href="{{ shop.url }}/admin/products/new">Go here to make one</a> and add it to the default "News" blog to see this component.
        {% endif %}

        <h4 class="docs-subtitle">Snippet API</h4>
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Option</th>
                <th>Values</th>                
                <th>Default</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>article</code></td>
                <td>Article</td>
                <td>None</td>
                <td>Shopify article object.  Required.</td>
              </tr>
              <tr>
                <td><code>show_author</code></td>
                <td>Boolean</td>
                <td>true</td>
                <td>Controls visibility of article author</td>
              </tr>
              <tr>
                <td><code>show_date</code></td>
                <td>Boolean</td>
                <td>true</td>
                <td>Controls visibility of article date</td>
              </tr>
              <tr>
                <td><code>show_tags</code></td>
                <td>Boolean</td>
                <td>true</td>
                <td>Controls visibility of article tags</td>
              </tr>
              <tr>
                <td><code>show_excerpt</code></td>
                <td>Boolean</td>
                <td>false</td>
                <td>Controls visibility of article excerpt</td>
              </tr>
              <tr>
                <td><code>img_size</code></td>
                <td>String</td>
                <td>600x450</td>
                <td>Specifies crop of the displayed article image.  See <a href="https://help.shopify.com/themes/liquid/filters/url-filters#size-parameters">URL Filter Size Parameters</a> for more info.</td>
              </tr>  
            </tbody>
          </table>
        </div>

        <h3 id="docs-content-card" class="docs-title">Content Card</h3>
        <p>See <code>snippets/content-card.liquid</code>.</p>
        <div class="docs-well docs-well--constrained">
          {% include 'content-card',
                      title: "Content Card Title"
                      subtitle: "Subtitle goes here"
                      text: "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo.</p>",
                      cta_text: "Shop Now"
                      cta_url: "#"
          %} 
        </div>

        <h3 id="docs-banners" class="docs-title">Banners</h3>
        <p>Banners are one of the most flexible and re-usable components on the site.  They consist of a parent <code>.banner</code> element and any number of child <code>.banner__panel</code> elements. The parent <code>.banner</code> element accepts <code>.banner--large</code> and <code>.banner--small</code> modifier classes to create different sized banners.  Note that these modifier classes affect the vertical padding of the child banner panels.</p>

        <p>Each banner panel has options for content alignment, text alignment, ctas, color inversion, custom vertical padding and content width, overlays and background images plus positioning at 3 different screen sizes.  Most options are optional and have fallbacks.  See <code>snippets/banner-panel.liquid</code> for the full list of options.</p>

        <p>Banners should generally be used <em>outside</em> of <code>.container</code> elements in order to be full bleed.  They have their own child <code>.container</code> elements to ensure that content doesn't stretch beyond the max content width for the site.</p>

        <p><strong>Note</strong>: Banner panel styling is set via a small style block contained within the snippet.  Because we use an ID inside this style block to target the specific panel, you <strong>must</strong> pass a unique ID string into the snippet.  For most use cases, some combination of section ID, block ID, and forloop index will do the trick.</p>

        <div class="banner">
          {% include 'banner-panel',
                      id: "123abc",
                      content_alignment: "center",
                      title: "Banner Panel Title 1",
                      content_alignment: "left",
                      text: "Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
          %}
          {% include 'banner-panel',
                      id: "abc123",
                      content_alignment: "center",
                      title: "Banner Panel Title 2",
                      content_alignment: "right",
                      text: "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
          %}  
        </div>

        <h3 id="docs-page-hero" class="docs-title">Page Hero</h3>
        <p>Page heroes function similar to banners but should only be used at the top of a page.  They are typically used as an enhancement over the text-only <code>.page-header</code> element when we want to display text over a background image.  Although their base styling is similar, they are built separately from banners to allow more flexibility.  The snippet API is also slightly different to support different features.</p>
        
        <p><strong>Note</strong>: Because of the limitations of liquid code and the fact that the page-hero snippet is built to accept an image object as opposed to an image fie url, it is impossible to pass a theme image asset to the snippet in order to show a fully featured example.  The example below shows the page hero without a background image, but one can be easily passed in as as a section setting (<code>section.settings.image</code>) or a reference from another object (<code>product.featured_image</code>).</p>

        {% include 'page-hero',
                    id: 'page-hero-123',
                    title: 'Page Hero Title',
                    toptitle: 'Introductory text goes here',
                    subtitle: 'Subtext goes down here',
                    cta_url: '/collections/all',
                    cta_text: 'Call to action link goes here'
        %}

        <h3 id="docs-promo" class="docs-title">Promo</h3>
        <p>Promos consist of an image and text laid out vertically on mobile and horizontally on desktop.  Listed below are the available options that affect layout / styling.</p>
        <h4 class="docs-subtitle">Snippet API</h4>
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Option</th>
                <th>Values</th>
                <th>Default</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>layout</code></td>
                <td>Left / Right</td>
                <td>Left</td>
                <td>Positions image on the left / right side.</td>
              </tr>
              <tr>
                <td><code>type</code></td>
                <td>1 / 2 / 3 / 4 / 5</td>
                <td>None</td>
                <td>Different types determine how the two columns of the promo share space.  See <code>promo.scss</code> for the list of widths.</td>
              </tr>
              <tr>
                <td><code>content_max_width</code></td>
                <td>Integer</td>
                <td>None</td>
                <td>Sets the maximum width of the text content on desktop sized screens</td>
              </tr>
              <tr>
                <td><code>frame_ratio</code></td>
                <td>String</td>
                <td>None</td>
                <td>If set, images will be applied as a background image to a frame element with this aspect ratio.  See <code>frames.scss</code></td>
              </tr>
              <tr>
                <td><code>frame_ratio_small</code></td>
                <td>String</td>
                <td>None</td>
                <td>If set, images will be applied as a background image to a frame element with this aspect ratio on mobile sized screens.  See <code>frames.scss</code></td>
              </tr>            
            </tbody>
          </table>
        </div>
        {% include 'promo',
                    id: 'abc-123',
                    layout: 'left',
                    type: 3,
                    content_max_width: 500,
                    title: 'Promo Title',
                    text: '<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>',
                    cta_url: '#',
                    cta_text: 'CTA Text'
        %}

        <h3 id="docs-modals" class="docs-title">Modals</h3>
        <p>Built using Bootstrap's Modal, use these to create an overlay to focus the user's attention.  <a href="https://getbootstrap.com/docs/3.3/javascript/#modals" target="_blank">Click here to see the docs for more info</a></p>

        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#test-modal-1">
          Launch Modal
        </button>

        <div class="modal fade" id="test-modal-1" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
          <div class="modal-dialog" role="document">
            <div class="modal-content">
              <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal" aria-label="Close">{% include 'icon-close' %}</a>
                <h3 class="modal-title" id="myModalLabel">Modal title</h3>
              </div>
              <div class="modal-body">
                <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
                    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
                    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
                    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>

        <h3 id="docs-drawer" class="docs-title">Drawer</h3>

        <p>Drawers are elements that are fixed to the side of the screen and are hidden by default.  Opening them will transition the element on screen and apply a backdrop to focus user attention and act as a clickable area that dismisses the drawer.</p>

        <p>The example below is included statically to use as reference while styling.  Clicking the triggers below will show a live, working demo.</p>

        <div class="docs-well docs-well--constrained">
          <div class="drawer is-visible" style="position: relative; z-index: 1">
            <div class="drawer__inner">
              <div class="drawer__header">
                <a href="#" class="drawer__close" data-drawer-close>
                  {% include 'icon-close' %}
                </a>        
                <h5 class="drawer__header-title">Example Drawer</h5>
              </div>
              <div class="drawer__body">
                <div class="drawer__body-contents">
                  <p>Drawer contents goes here, inside the body.</p>
                  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                  tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
                  quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
                  consequat.</p>
                </div>
              </div>
              <div class="drawer__body drawer__body--flush">
                <div class="drawer__body-contents" style="background-color: #F3F3F3">
                  <p>Use the <code>.drawer__body--flush</code> modifier class to allow the drawer body contents to extend to the edge.</p>
                </div>
              </div>
              <div class="drawer__footer">
                <p><a href="#" class="btn btn-primary btn-block">Use the footer for a CTA</a></p>
                <p class="u-ta-center small">Or for promotional messaging</p>
              </div>
            </div>
          </div>
        </div>

        <p>You can use the drawer with or without a backdrop.  If the backdrop is used, scrolling will be killed on the body when the drawer is opened.</p>

        <p>The API closely follows the one for Bootstrap's modals.  You can create the drawer programatically by calling the <code>Drawer</code> constructor and passing in options or by using <code>data-*</code> attributes to specify the element, trigger and options.  The example below uses the data API.</p>        

        <p>
          <button data-toggle="drawer" data-target="#my-drawer" data-backdrop="true" class="btn btn-primary">Trigger drawer</button>
          <button data-toggle="drawer" data-target="#my-drawer" data-backdrop="false" class="btn btn-primary">Trigger drawer without backdrop</button>
        </p>

        <div id="my-drawer" class="drawer">
          <div class="drawer__inner">
            <div class="drawer__header">
              <a href="#" class="drawer__close" data-drawer-close>
                {% include 'icon-close' %}
              </a>        
              <h5 class="drawer__header-title">Drawer Header</h5>
            </div>
            <div class="drawer__body">
              <div class="drawer__body-contents">
                <p>Drawer content goes here.</p>
              </div>
            </div>
            <div class="drawer__body drawer__body--flush">
              <div class="drawer__body-contents" style="background: #fff6d0; padding-top: 30px; padding-bottom:30px;">
                <p>I'm content that is using the flush drawer body modifier class.</p>
              </div>
            </div> 
            <div class="drawer__footer">
              Throw some content in the footer of this drawer.
            </div>           
          </div>
        </div>    

        <h4 class="docs-subtitle">Options</h4>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Default</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>closeSelector</code></td>
                <td>String</td>
                <td>[data-drawer-close]</td>
                <td>Selector for the close button contained within the drawer element.</td>
              </tr>
              <tr>
                <td><code>backdrop</code></td>
                <td>Boolean</td>
                <td>true</td>
                <td>Turns on / off a clickable backdrop.</td>
              </tr>            
            </tbody>
          </table>
        </div> 

        <h4 class="docs-subtitle">Events</h4>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>hide.drawer</code></td>
                <td>Triggered when the <code>hide</code> method is called even if the drawer is already closed.</td>
              </tr>
              <tr>
                <td><code>hidden.drawer</code></td>
                <td>Triggered when the hide animation completes</td>
              </tr>
              <tr>
                <td><code>show.drawer</code></td>
                <td>Triggered when the <code>show</code> method is called even if the drawer is already open.</td>
              </tr>
              <tr>
                <td><code>shown.drawer</code></td>
                <td>Triggered when the show animation completes</td>
              </tr>
            </tbody>
          </table>
        </div> 

        <h3 id="docs-slideup" class="docs-title">Slideup</h3>
        <p>Slideups are similar to drawers in that they are fixed to the screen but they are positioned at the bottom of the viewport and are generally used for site notices as opposed to site functionality.</p>

        <p>The example below is included statically to use as reference while styling.  Clicking the trigger below will show a live, working demo.</p>        

        <div class="docs-well">
          <div class="slideup is-visible" style="position: relative; z-index: 1">
            <div class="container">
              <a href="#" class="slideup__close" data-slideup-close>{% include 'icon-close' %}</a>
              <div class="slideup__content">
                <h4 class="slideup__title">Slideup Title</h4>
                <div class="slideup__text">
                  <p class="p1">Throw some text in here that you want to force the user to see.</p>
                </div>
              </div>
            </div>
          </div>
        </div>    

        <p>The API closely follows the one for Bootstrap's modals.  You can create the slideup programatically by calling the <code>Slideup</code> constructor and passing in options or by using <code>data-*</code> attributes to specify the element, trigger and options.  The example below uses the data API.</p>

        <p>
          <button data-toggle="slideup" data-target="#my-slideup" class="btn btn-primary">Trigger slideup</button>
        </p>

        <div id="my-slideup" class="slideup">
          <div class="container">
            <a href="#" class="slideup__close" data-slideup-close>{% include 'icon-close' %}</a>
            <div class="slideup__content">
              <h4 class="slideup__title">Slideup Title</h4>
              <div class="slideup__text">
                <p class="p1">Throw some text in here that you want to force the user to see.</p>
              </div>
            </div>
          </div>
        </div>

        <h4 class="docs-subtitle">Options</h4>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Default</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>closeSelector</code></td>
                <td>String</td>
                <td>[data-slideup-close]</td>
                <td>Selector for the close button contained within the slideup element.</td>
              </tr>           
            </tbody>
          </table>
        </div> 

        <h4 class="docs-subtitle">Events</h4>

        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>Name</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td><code>hide.slideup</code></td>
                <td>Triggered when the <code>hide</code> method is called even if the slideup is already closed.</td>
              </tr>
              <tr>
                <td><code>hidden.slideup</code></td>
                <td>Triggered when the hide animation completes</td>
              </tr>
              <tr>
                <td><code>show.slideup</code></td>
                <td>Triggered when the <code>show</code> method is called even if the slideup is already open.</td>
              </tr>
              <tr>
                <td><code>shown.slideup</code></td>
                <td>Triggered when the show animation completes.</td>
              </tr>
            </tbody>
          </table>
        </div>

        <h3 id="docs-slideup" class="docs-title">Slideup Alert</h3>
        <p>Slideup alerts are one time alerts that utilize the slideup class.  Use the form below to test how alerts will show up.</p>

        <form class="form-inline" data-slideup-alert-form>
          <div class="form-group">
            <input type="text" class="form-control" placeholder="Enter Message">
          </div>
          <button type="submit" class="btn btn-primary">Show Alert</button>
        </form>               

      </div>
    </div>
  </div>
</div>